name: Build and Push with Podman on EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghes.your-company.com
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, karpenter]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Podman
      run: |
        # Podman should already be available on Bottlerocket via host containers
        # Verify podman installation
        podman --version
        
        # Configure podman for rootless operation
        podman system migrate
        
        # Login to GHES container registry
        echo "${{ secrets.GHES_TOKEN }}" | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

    - name: Extract metadata
      id: meta
      run: |
        # Extract branch name and commit SHA
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        COMMIT_SHA=${GITHUB_SHA::8}
        
        # Set image tags
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}-${COMMIT_SHA},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        echo "labels=org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_OUTPUT

    - name: Build container image
      run: |
        podman build \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "org.opencontainers.image.revision=${{ github.sha }}" \
          --file Containerfile .

    - name: Push to registry
      run: |
        podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Clean up local images
      if: always()
      run: |
        podman rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} || true
        podman rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        podman system prune -f

  deploy-to-k8s:
    needs: build-and-push
    runs-on: [self-hosted, linux, karpenter]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}
        
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ vars.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create or update registry secret
      run: |
        kubectl create secret docker-registry ghes-registry-secret \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GHES_TOKEN }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com \
          --namespace=${{ vars.APP_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy application
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ github.event.repository.name }}
          namespace: ${{ vars.APP_NAMESPACE }}
          labels:
            app: ${{ github.event.repository.name }}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: ${{ github.event.repository.name }}
          template:
            metadata:
              labels:
                app: ${{ github.event.repository.name }}
            spec:
              imagePullSecrets:
              - name: ghes-registry-secret
              containers:
              - name: app
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 8080
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
                env:
                - name: VERSION
                  value: ${{ github.sha }}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ github.event.repository.name }}-service
          namespace: ${{ vars.APP_NAMESPACE }}
        spec:
          selector:
            app: ${{ github.event.repository.name }}
          ports:
          - port: 80
            targetPort: 8080
          type: ClusterIP
        EOF
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/${{ github.event.repository.name }} -n ${{ vars.APP_NAMESPACE }} --timeout=300s
        
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ vars.APP_NAMESPACE }} -l app=${{ github.event.repository.name }}
        kubectl get service -n ${{ vars.APP_NAMESPACE }} ${{ github.event.repository.name }}-service